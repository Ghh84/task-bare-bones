{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\gheri\\\\OneDrive\\\\Desktop\\\\Job related\\\\choicely\\\\task-bare-bones\\\\src\\\\components\\\\stops\\\\Stops.jsx\";\nimport React, { useEffect, useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { fetchingData, fetchingFailed, fetchingSuccess } from '../../actions';\nimport Table from './tableComponent/table';\n/** =====================================================================\n *  Feel free to change anything you wish as well as using\n *  Classes instead of Functional Components.\n *\n *  More info on README.md file\n *  Doubts? <vinicius@choicely.com>\n *  ======================================================================= */\n\nconst url = 'https://api.digitransit.fi/routing/v1/routers/hsl/index/graphql';\nconst query = `{\n  stop(id: \"HSL:1020453\") {\n   name\n   stoptimesWithoutPatterns(numberOfDepartures: 10) {\n\tstop {\n\t  platformCode\n\t}\n\t    serviceDay  \n\t    scheduledArrival\n\t    realtimeArrival\n\t    arrivalDelay\n\t    scheduledDeparture\n\t    realtimeDeparture\n\t    departureDelay\n\t    realtime\n\t     headsign\n        trip {\n          route {\n            shortName\n            agency {\n              name\n            }\n          }\n          wheelchairAccessible\n          bikesAllowed\n        }\n        \n      } \n  }  \n}`;\nconst options = {\n  method: 'POST',\n  headers: {\n    'content-type': 'application/json'\n  },\n  body: JSON.stringify({\n    query\n  })\n};\n\nconst Stops = props => {\n  const {\n    stops,\n    fetchData,\n    fetchFailed,\n    fetchSuccess\n  } = props;\n  const {\n    data,\n    loading,\n    error\n  } = stops;\n  const [currentDate, setCurrentDate] = useState('');\n  console.log(data);\n  const columns = [{\n    path: 'scheduledDeparture',\n    label: 'Departure time'\n  }, {\n    path: 'reaminTime',\n    label: 'Reamn Time'\n  }, {\n    path: 'train',\n    label: 'Train'\n  }, {\n    path: 'headsign',\n    label: 'Destination'\n  }, {\n    path: 'platformCode',\n    label: 'Platform'\n  }];\n  useEffect(() => {\n    fetchData();\n    fetch(url, options).then(res => res.json()).then(data => fetchSuccess(data)).catch(e => fetchFailed(e.message));\n  }, [fetchData, fetchFailed, fetchSuccess]); // See the hints? :)\n\n  getCurrentdate = date => {\n    return new Date(date * 1000).toLocaleDateString('en-US', {\n      weekday: 'short',\n      year: 'numeric',\n      month: 'short',\n      day: 'numeric'\n    });\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 5\n    }\n  }, error && /*#__PURE__*/React.createElement(\"span\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 17\n    }\n  }, error), loading && /*#__PURE__*/React.createElement(\"span\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 19\n    }\n  }, \"Loading ...\"), data && data.stoptimesWithoutPatterns && /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"h3\", {\n    id: \"h3\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 11\n    }\n  }, \" \", data.name), /*#__PURE__*/React.createElement(\"h4\", {\n    id: \"h4\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 11\n    }\n  }, () => this.getCurrentdate(() => data.stoptimesWithoutPatterns[0].serviceDay)), /*#__PURE__*/React.createElement(Table, {\n    columns: columns,\n    data: data.stoptimesWithoutPatterns,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 11\n    }\n  })));\n};\n\nStops.protoTypes = {\n  data: PropTypes.object,\n  fetchData: PropTypes.func,\n  fetchFailed: PropTypes.func,\n  fetchSuccess: PropTypes.func\n};\n\nfunction mapStateToProps(state) {\n  const {\n    stops\n  } = state;\n  return {\n    stops\n  };\n}\n\nfunction mapDispatchToProps(dispatch) {\n  return {\n    fetchData: () => {\n      dispatch(fetchingData());\n    },\n    fetchFailed: error => {\n      dispatch(fetchingFailed(error));\n    },\n    fetchSuccess: data => {\n      dispatch(fetchingSuccess(data));\n    }\n  };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Stops);","map":{"version":3,"names":["React","useEffect","useState","PropTypes","connect","fetchingData","fetchingFailed","fetchingSuccess","Table","url","query","options","method","headers","body","JSON","stringify","Stops","props","stops","fetchData","fetchFailed","fetchSuccess","data","loading","error","currentDate","setCurrentDate","console","log","columns","path","label","fetch","then","res","json","catch","e","message","getCurrentdate","date","Date","toLocaleDateString","weekday","year","month","day","stoptimesWithoutPatterns","name","serviceDay","protoTypes","object","func","mapStateToProps","state","mapDispatchToProps","dispatch"],"sources":["C:/Users/gheri/OneDrive/Desktop/Job related/choicely/task-bare-bones/src/components/stops/Stops.jsx"],"sourcesContent":["import React, { useEffect, useState } from 'react'\nimport PropTypes from 'prop-types'\n\nimport { connect } from 'react-redux'\nimport { fetchingData, fetchingFailed, fetchingSuccess } from '../../actions'\nimport Table from './tableComponent/table'\n/** =====================================================================\n *  Feel free to change anything you wish as well as using\n *  Classes instead of Functional Components.\n *\n *  More info on README.md file\n *  Doubts? <vinicius@choicely.com>\n *  ======================================================================= */\nconst url = 'https://api.digitransit.fi/routing/v1/routers/hsl/index/graphql'\nconst query = `{\n  stop(id: \"HSL:1020453\") {\n   name\n   stoptimesWithoutPatterns(numberOfDepartures: 10) {\n\tstop {\n\t  platformCode\n\t}\n\t    serviceDay  \n\t    scheduledArrival\n\t    realtimeArrival\n\t    arrivalDelay\n\t    scheduledDeparture\n\t    realtimeDeparture\n\t    departureDelay\n\t    realtime\n\t     headsign\n        trip {\n          route {\n            shortName\n            agency {\n              name\n            }\n          }\n          wheelchairAccessible\n          bikesAllowed\n        }\n        \n      } \n  }  \n}`\n\nconst options = {\n  method: 'POST',\n  headers: {\n    'content-type': 'application/json',\n  },\n  body: JSON.stringify({\n    query,\n  }),\n}\n\nconst Stops = (props) => {\n  const { stops, fetchData, fetchFailed, fetchSuccess } = props\n  const { data, loading, error } = stops\n  const [currentDate, setCurrentDate] = useState('')\n  console.log(data)\n  const columns = [\n    { path: 'scheduledDeparture', label: 'Departure time' },\n    { path: 'reaminTime', label: 'Reamn Time' },\n    { path: 'train', label: 'Train' },\n    { path: 'headsign', label: 'Destination' },\n    { path: 'platformCode', label: 'Platform' },\n  ]\n\n  useEffect(() => {\n    fetchData()\n    fetch(url, options)\n      .then((res) => res.json())\n      .then((data) => fetchSuccess(data))\n      .catch((e) => fetchFailed(e.message))\n  }, [fetchData, fetchFailed, fetchSuccess])\n  // See the hints? :)\n  getCurrentdate = (date) => {\n    return new Date(date * 1000).toLocaleDateString('en-US', {\n      weekday: 'short',\n      year: 'numeric',\n      month: 'short',\n      day: 'numeric',\n    })\n  }\n  return (\n    <div>\n      {/* <h2>\n        <span role=\"img\" aria-label=\"lucky\">\n          üëçüçÄü§û\n        </span>\n        Good Luck!\n        <span role=\"img\" aria-label=\"lucky\">\n          ü§ûüçÄüëç\n        </span>\n      </h2> */}\n      {error && <span>{error}</span>}\n      {loading && <span>Loading ...</span>}\n      {data && data.stoptimesWithoutPatterns && (\n        <div>\n          <h3 id=\"h3\"> {data.name}</h3>\n          <h4 id=\"h4\">\n            {() =>\n              this.getCurrentdate(\n                () => data.stoptimesWithoutPatterns[0].serviceDay,\n              )\n            }\n          </h4>\n          <Table columns={columns} data={data.stoptimesWithoutPatterns} />\n        </div>\n      )}\n    </div>\n  )\n}\n\nStops.protoTypes = {\n  data: PropTypes.object,\n  fetchData: PropTypes.func,\n  fetchFailed: PropTypes.func,\n  fetchSuccess: PropTypes.func,\n}\n\nfunction mapStateToProps(state) {\n  const { stops } = state\n  return {\n    stops,\n  }\n}\n\nfunction mapDispatchToProps(dispatch) {\n  return {\n    fetchData: () => {\n      dispatch(fetchingData())\n    },\n    fetchFailed: (error) => {\n      dispatch(fetchingFailed(error))\n    },\n    fetchSuccess: (data) => {\n      dispatch(fetchingSuccess(data))\n    },\n  }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Stops)\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}