{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\gheri\\\\OneDrive\\\\Desktop\\\\Job related\\\\choicely\\\\task-bare-bones\\\\src\\\\components\\\\stops\\\\Stops.jsx\";\nimport React, { useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { fetchingData, fetchingFailed, fetchingSuccess, updateData } from '../../actions';\nimport Table from './tableComponent/table';\n/** =====================================================================\n *  Feel free to change anything you wish as well as using\n *  Classes instead of Functional Components.\n *\n *  More info on README.md file\n *  Doubts? <vinicius@choicely.com>\n *  ======================================================================= */\n\nconst url = 'https://api.digitransit.fi/routing/v1/routers/hsl/index/graphql';\nconst query = `{\n  stop(id: \"HSL:1020453\") {\n   name\n   stoptimesWithoutPatterns(numberOfDepartures: 10) {\n\tstop {\n\t\tgtfsId\n\t\tname\n\t\tcode\n\t\tplatformCode\n\t}\n\t    serviceDay \n\t\trealtimeDeparture \n\t    scheduledArrival\n\t    scheduledDeparture\n\t\tarrivalDelay\n\t    headsign\n        trip {\n          route {\n            shortName\n            agency {\n              name\n            }\n          }\n          wheelchairAccessible\n          bikesAllowed\n        }        \n      } \n  }  \n\n}`;\nconst options = {\n  method: 'POST',\n  headers: {\n    'content-type': 'application/json'\n  },\n  body: JSON.stringify({\n    query\n  })\n};\n\nconst Stops = props => {\n  const {\n    stops,\n    fetchData,\n    fetchFailed,\n    fetchSuccess,\n    updateData\n  } = props;\n  const {\n    data,\n    loading,\n    error,\n    columns\n  } = stops;\n  console.log(data); //   function refreshDate() {\n  //     setTimeout('getServiceDate();', 1000)\n  //   }\n  //   function getServiceDate() {\n  //     // setTimeout(getServiceDate(date), 2000)\n  //     const time = new Date().toLocaleDateString('en-US', {\n  //       weekday: 'short',\n  //       year: 'numeric',\n  //       month: 'short',\n  //       day: 'numeric',\n  //       hour: 'numeric',\n  //       minute: 'numeric',\n  //       second: 'numeric',\n  //     })\n  //     return time\n  //     // setCurrentTime(time)\n  //     // refreshDate()\n  //   }\n\n  useEffect(() => {\n    fetchData();\n    fetch(url, options).then(res => res.json()).then(data => fetchSuccess(data)).catch(e => fetchFailed(e.message));\n    upData();\n  }, [fetchData, fetchFailed, fetchSuccess, updateData]); // See the hints? :)\n\n  function display_c() {\n    var refresh = 1000; // Refresh rate in milli seconds\n\n    mytime = setTimeout('upData', refresh);\n  }\n\n  function upData() {\n    updateData();\n    display_c();\n  }\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 5\n    }\n  }, error && /*#__PURE__*/React.createElement(\"span\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 17\n    }\n  }, error), loading && /*#__PURE__*/React.createElement(\"span\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 19\n    }\n  }, \"Loading ...\"), data && data.stoptimesWithoutPatterns && /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"h3\", {\n    id: \"h4\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 11\n    }\n  }, \" \", data.name), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"div\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 11\n    }\n  }, new Date(data.stoptimesWithoutPatterns[0].serviceDay * 1000).toLocaleDateString('en-US', {\n    weekday: 'short',\n    year: 'numeric',\n    month: 'short',\n    day: 'numeric'\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 124,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"span\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 125,\n      columnNumber: 15\n    }\n  }, \"Code: \", data.stoptimesWithoutPatterns[0].stop.code), /*#__PURE__*/React.createElement(\"span\", {\n    id: \"span\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 126,\n      columnNumber: 15\n    }\n  }, \"Plateform:\", data.stoptimesWithoutPatterns[0].stop.platformCode))), /*#__PURE__*/React.createElement(Table, {\n    columns: columns,\n    data: data.stoptimesWithoutPatterns,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 132,\n      columnNumber: 11\n    }\n  })));\n};\n\nStops.protoTypes = {\n  data: PropTypes.object,\n  fetchData: PropTypes.func,\n  fetchFailed: PropTypes.func,\n  fetchSuccess: PropTypes.func\n};\n\nfunction mapStateToProps(state) {\n  const {\n    stops\n  } = state;\n  return {\n    stops\n  };\n}\n\nfunction mapDispatchToProps(dispatch) {\n  return {\n    fetchData: () => {\n      dispatch(fetchingData());\n    },\n    fetchFailed: error => {\n      dispatch(fetchingFailed(error));\n    },\n    fetchSuccess: data => {\n      dispatch(fetchingSuccess(data));\n    }\n  };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Stops);","map":{"version":3,"names":["React","useEffect","PropTypes","connect","fetchingData","fetchingFailed","fetchingSuccess","updateData","Table","url","query","options","method","headers","body","JSON","stringify","Stops","props","stops","fetchData","fetchFailed","fetchSuccess","data","loading","error","columns","console","log","fetch","then","res","json","catch","e","message","upData","display_c","refresh","mytime","setTimeout","stoptimesWithoutPatterns","name","Date","serviceDay","toLocaleDateString","weekday","year","month","day","stop","code","platformCode","protoTypes","object","func","mapStateToProps","state","mapDispatchToProps","dispatch"],"sources":["C:/Users/gheri/OneDrive/Desktop/Job related/choicely/task-bare-bones/src/components/stops/Stops.jsx"],"sourcesContent":["import React, { useEffect } from 'react'\nimport PropTypes from 'prop-types'\nimport { connect } from 'react-redux'\n\nimport {\n  fetchingData,\n  fetchingFailed,\n  fetchingSuccess,\n  updateData,\n} from '../../actions'\nimport Table from './tableComponent/table'\n/** =====================================================================\n *  Feel free to change anything you wish as well as using\n *  Classes instead of Functional Components.\n *\n *  More info on README.md file\n *  Doubts? <vinicius@choicely.com>\n *  ======================================================================= */\nconst url = 'https://api.digitransit.fi/routing/v1/routers/hsl/index/graphql'\nconst query = `{\n  stop(id: \"HSL:1020453\") {\n   name\n   stoptimesWithoutPatterns(numberOfDepartures: 10) {\n\tstop {\n\t\tgtfsId\n\t\tname\n\t\tcode\n\t\tplatformCode\n\t}\n\t    serviceDay \n\t\trealtimeDeparture \n\t    scheduledArrival\n\t    scheduledDeparture\n\t\tarrivalDelay\n\t    headsign\n        trip {\n          route {\n            shortName\n            agency {\n              name\n            }\n          }\n          wheelchairAccessible\n          bikesAllowed\n        }        \n      } \n  }  \n\n}`\nconst options = {\n  method: 'POST',\n  headers: {\n    'content-type': 'application/json',\n  },\n  body: JSON.stringify({\n    query,\n  }),\n}\nconst Stops = (props) => {\n  const { stops, fetchData, fetchFailed, fetchSuccess, updateData } = props\n  const { data, loading, error, columns } = stops\n\n  console.log(data)\n  //   function refreshDate() {\n  //     setTimeout('getServiceDate();', 1000)\n  //   }\n  //   function getServiceDate() {\n  //     // setTimeout(getServiceDate(date), 2000)\n  //     const time = new Date().toLocaleDateString('en-US', {\n  //       weekday: 'short',\n  //       year: 'numeric',\n  //       month: 'short',\n  //       day: 'numeric',\n  //       hour: 'numeric',\n  //       minute: 'numeric',\n  //       second: 'numeric',\n  //     })\n  //     return time\n  //     // setCurrentTime(time)\n  //     // refreshDate()\n  //   }\n  useEffect(() => {\n    fetchData()\n    fetch(url, options)\n      .then((res) => res.json())\n      .then((data) => fetchSuccess(data))\n      .catch((e) => fetchFailed(e.message))\n    upData()\n  }, [fetchData, fetchFailed, fetchSuccess, updateData])\n  // See the hints? :)\n  function display_c() {\n    var refresh = 1000 // Refresh rate in milli seconds\n    mytime = setTimeout('upData', refresh)\n  }\n  function upData() {\n    updateData()\n    display_c()\n  }\n  return (\n    <div>\n      {/* <h2>\n        <span role=\"img\" aria-label=\"lucky\">\n          üëçüçÄü§û\n        </span>\n        Good Luck!\n        <span role=\"img\" aria-label=\"lucky\">\n          ü§ûüçÄüëç\n        </span>\n      </h2> */}\n      {error && <span>{error}</span>}\n      {loading && <span>Loading ...</span>}\n      {data && data.stoptimesWithoutPatterns && (\n        <div>\n          <h3 id=\"h4\"> {data.name}</h3>\n          <div className=\"div\">\n            {new Date(\n              data.stoptimesWithoutPatterns[0].serviceDay * 1000,\n            ).toLocaleDateString('en-US', {\n              weekday: 'short',\n              year: 'numeric',\n              month: 'short',\n              day: 'numeric',\n            })}\n            <div>\n              <span>Code: {data.stoptimesWithoutPatterns[0].stop.code}</span>\n              <span id=\"span\">\n                Plateform:\n                {data.stoptimesWithoutPatterns[0].stop.platformCode}\n              </span>\n            </div>\n          </div>\n          <Table columns={columns} data={data.stoptimesWithoutPatterns} />\n        </div>\n      )}\n    </div>\n  )\n}\n\nStops.protoTypes = {\n  data: PropTypes.object,\n  fetchData: PropTypes.func,\n  fetchFailed: PropTypes.func,\n  fetchSuccess: PropTypes.func,\n}\n\nfunction mapStateToProps(state) {\n  const { stops } = state\n  return {\n    stops,\n  }\n}\n\nfunction mapDispatchToProps(dispatch) {\n  return {\n    fetchData: () => {\n      dispatch(fetchingData())\n    },\n    fetchFailed: (error) => {\n      dispatch(fetchingFailed(error))\n    },\n    fetchSuccess: (data) => {\n      dispatch(fetchingSuccess(data))\n    },\n  }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Stops)\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}