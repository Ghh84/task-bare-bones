{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\gheri\\\\OneDrive\\\\Desktop\\\\Job related\\\\choicely\\\\task-bare-bones\\\\src\\\\components\\\\stops\\\\tableComponent\\\\tableBody.jsx\";\nimport React, { Component } from 'react';\nimport _ from 'lodash';\nimport moment from 'moment';\n\nclass TableBody extends Component {\n  constructor() {\n    super(...arguments);\n\n    this.renderCell = (stopInfo, column) => {\n      if (column.refId === 'time') {\n        return new Date(_.get(stopInfo, column.path) * 1000).toISOString().substr(11, 5);\n      }\n\n      if (column.refId === 'delay') {\n        const realDeparture = _.get(stopInfo, column.path[0]) * 1000;\n        const sheduledDeparture = _.get(stopInfo, column.path[1]) * 1000;\n        return Math.abs(new Date(sheduledDeparture).getHours() * 60 + new Date(sheduledDeparture).getMinutes() - new Date(realDeparture).getHours() * 60 - new Date(realDeparture).getMinutes()) + ' ' + 'min';\n      }\n\n      if (column.refId === 'dueIn') {\n        const departureDate = new Date(_.get(stopInfo, column.path) * 1000).toISOString().substr(11, 8);\n        return this.calWaitTime(departureDate);\n      }\n\n      return _.get(stopInfo, column.path);\n    };\n\n    this.calWaitTime = departureDate => {\n      var today = new Date();\n      var currentDate = today.getHours() + ':' + today.getMinutes() + ':' + today.getSeconds();\n      var startTime = moment(currentDate, 'HH:mm:ss');\n      var endTime = moment(departureDate, 'HH:mm:ss');\n      var min = moment.utc(endTime.diff(startTime)).format('mm');\n      return [min] + ' ' + 'min';\n    };\n  }\n\n  render() {\n    const {\n      data,\n      columns\n    } = this.props;\n    return /*#__PURE__*/React.createElement(\"tbody\", {\n      id: \"tableBody\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 7\n      }\n    }, data.map((stopInfo, index) => /*#__PURE__*/React.createElement(\"tr\", {\n      key: index,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 11\n      }\n    }, columns.map(column => /*#__PURE__*/React.createElement(\"td\", {\n      key: index + column.refId,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 15\n      }\n    }, column.refId === 'delay' && this.renderCell(stopInfo, column) != '0 min' ? /*#__PURE__*/React.createElement(\"span\", {\n      id: \"delay\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 19\n      }\n    }, this.renderCell(stopInfo, column)) : /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 19\n      }\n    }, this.renderCell(stopInfo, column)))))));\n  }\n\n}\n\nexport default TableBody;","map":{"version":3,"names":["React","Component","_","moment","TableBody","renderCell","stopInfo","column","refId","Date","get","path","toISOString","substr","realDeparture","sheduledDeparture","Math","abs","getHours","getMinutes","departureDate","calWaitTime","today","currentDate","getSeconds","startTime","endTime","min","utc","diff","format","render","data","columns","props","map","index"],"sources":["C:/Users/gheri/OneDrive/Desktop/Job related/choicely/task-bare-bones/src/components/stops/tableComponent/tableBody.jsx"],"sourcesContent":["import React, { Component } from 'react'\r\nimport _ from 'lodash'\r\nimport moment from 'moment'\r\n\r\nclass TableBody extends Component {\r\n  renderCell = (stopInfo, column) => {\r\n    if (column.refId === 'time') {\r\n      return new Date(_.get(stopInfo, column.path) * 1000)\r\n        .toISOString()\r\n        .substr(11, 5)\r\n    }\r\n    if (column.refId === 'delay') {\r\n      const realDeparture = _.get(stopInfo, column.path[0]) * 1000\r\n      const sheduledDeparture = _.get(stopInfo, column.path[1]) * 1000\r\n      return (\r\n        Math.abs(\r\n          new Date(sheduledDeparture).getHours() * 60 +\r\n            new Date(sheduledDeparture).getMinutes() -\r\n            new Date(realDeparture).getHours() * 60 -\r\n            new Date(realDeparture).getMinutes(),\r\n        ) +\r\n        ' ' +\r\n        'min'\r\n      )\r\n    }\r\n\r\n    if (column.refId === 'dueIn') {\r\n      const departureDate = new Date(_.get(stopInfo, column.path) * 1000)\r\n        .toISOString()\r\n        .substr(11, 8)\r\n      return this.calWaitTime(departureDate)\r\n    }\r\n    return _.get(stopInfo, column.path)\r\n  }\r\n\r\n  calWaitTime = (departureDate) => {\r\n    var today = new Date()\r\n    var currentDate =\r\n      today.getHours() + ':' + today.getMinutes() + ':' + today.getSeconds()\r\n    var startTime = moment(currentDate, 'HH:mm:ss')\r\n    var endTime = moment(departureDate, 'HH:mm:ss')\r\n    var min = moment.utc(endTime.diff(startTime)).format('mm')\r\n    return [min] + ' ' + 'min'\r\n  }\r\n  render() {\r\n    const { data, columns } = this.props\r\n    return (\r\n      <tbody id=\"tableBody\">\r\n        {data.map((stopInfo, index) => (\r\n          <tr key={index}>\r\n            {columns.map((column) => (\r\n              <td key={index + column.refId}>\r\n                {column.refId === 'delay' &&\r\n                this.renderCell(stopInfo, column) != '0 min' ? (\r\n                  <span id=\"delay\">{this.renderCell(stopInfo, column)}</span>\r\n                ) : (\r\n                  <div>{this.renderCell(stopInfo, column)}</div>\r\n                )}\r\n              </td>\r\n            ))}\r\n          </tr>\r\n        ))}\r\n      </tbody>\r\n    )\r\n  }\r\n}\r\n\r\nexport default TableBody\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}