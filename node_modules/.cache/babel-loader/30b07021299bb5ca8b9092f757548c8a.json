{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\gheri\\\\OneDrive\\\\Desktop\\\\Job related\\\\choicely\\\\task-bare-bones\\\\src\\\\components\\\\stops\\\\tableComponent\\\\tableBody.jsx\";\nimport React, { Component } from 'react';\nimport _ from 'lodash';\nimport currentDate from './../../../utilts/currentTime';\n\nclass TableBody extends Component {\n  constructor() {\n    super(...arguments);\n\n    this.renderCell = (stopInfo, column) => {\n      if (column.path === 'reaminTime') {\n        const departureDate = new Date(_.get(stopInfo, 'scheduledDeparture') * 1000).toISOString().substr(11, 8);\n        var today = new Date();\n        var currentDate = today.getHours() + ':' + today.getMinutes() + ':' + today.getSeconds();\n        const diffMs = currentDate - new Date(departureDate);\n        console.log(new Date(departureDate));\n        const diffInMs = Math.abs(date2 - date1);\n        return diffInMs / (1000 * 60);\n      }\n\n      if (column.path === 'scheduledDeparture') {\n        return new Date(_.get(stopInfo, column.path) * 1000).toISOString().substr(11, 8);\n      }\n\n      if (column.path === 'platformCode') {\n        return _.get(stopInfo.stop, column.path);\n      }\n\n      return _.get(stopInfo, column.path);\n    };\n\n    this.createKey = (index, column) => {\n      return index + (column.path || column.key);\n    };\n  }\n\n  render() {\n    const {\n      data,\n      columns\n    } = this.props;\n    return /*#__PURE__*/React.createElement(\"tbody\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 7\n      }\n    }, data.map((stopInfo, index) => /*#__PURE__*/React.createElement(\"tr\", {\n      key: index,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 11\n      }\n    }, columns.map(column => /*#__PURE__*/React.createElement(\"td\", {\n      key: this.createKey(index, column),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 15\n      }\n    }, this.renderCell(stopInfo, column))))));\n  }\n\n}\n\nexport default TableBody;","map":{"version":3,"names":["React","Component","_","currentDate","TableBody","renderCell","stopInfo","column","path","departureDate","Date","get","toISOString","substr","today","getHours","getMinutes","getSeconds","diffMs","console","log","diffInMs","Math","abs","date2","date1","stop","createKey","index","key","render","data","columns","props","map"],"sources":["C:/Users/gheri/OneDrive/Desktop/Job related/choicely/task-bare-bones/src/components/stops/tableComponent/tableBody.jsx"],"sourcesContent":["import React, { Component } from 'react'\r\nimport _ from 'lodash'\r\nimport currentDate from './../../../utilts/currentTime'\r\n\r\nclass TableBody extends Component {\r\n  renderCell = (stopInfo, column) => {\r\n    if (column.path === 'reaminTime') {\r\n      const departureDate = new Date(\r\n        _.get(stopInfo, 'scheduledDeparture') * 1000,\r\n      )\r\n        .toISOString()\r\n        .substr(11, 8)\r\n      var today = new Date()\r\n      var currentDate =\r\n        today.getHours() + ':' + today.getMinutes() + ':' + today.getSeconds()\r\n      const diffMs = currentDate - new Date(departureDate)\r\n      console.log(new Date(departureDate))\r\n      const diffInMs = Math.abs(date2 - date1)\r\n      return diffInMs / (1000 * 60)\r\n    }\r\n    if (column.path === 'scheduledDeparture') {\r\n      return new Date(_.get(stopInfo, column.path) * 1000)\r\n        .toISOString()\r\n        .substr(11, 8)\r\n    }\r\n    if (column.path === 'platformCode') {\r\n      return _.get(stopInfo.stop, column.path)\r\n    }\r\n\r\n    return _.get(stopInfo, column.path)\r\n  }\r\n\r\n  createKey = (index, column) => {\r\n    return index + (column.path || column.key)\r\n  }\r\n\r\n  render() {\r\n    const { data, columns } = this.props\r\n\r\n    return (\r\n      <tbody>\r\n        {data.map((stopInfo, index) => (\r\n          <tr key={index}>\r\n            {columns.map((column) => (\r\n              <td key={this.createKey(index, column)}>\r\n                {this.renderCell(stopInfo, column)}\r\n              </td>\r\n            ))}\r\n          </tr>\r\n        ))}\r\n      </tbody>\r\n    )\r\n  }\r\n}\r\n\r\nexport default TableBody\r\n"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,CAAP,MAAc,QAAd;AACA,OAAOC,WAAP,MAAwB,+BAAxB;;AAEA,MAAMC,SAAN,SAAwBH,SAAxB,CAAkC;EAAA;IAAA;;IAAA,KAChCI,UADgC,GACnB,CAACC,QAAD,EAAWC,MAAX,KAAsB;MACjC,IAAIA,MAAM,CAACC,IAAP,KAAgB,YAApB,EAAkC;QAChC,MAAMC,aAAa,GAAG,IAAIC,IAAJ,CACpBR,CAAC,CAACS,GAAF,CAAML,QAAN,EAAgB,oBAAhB,IAAwC,IADpB,EAGnBM,WAHmB,GAInBC,MAJmB,CAIZ,EAJY,EAIR,CAJQ,CAAtB;QAKA,IAAIC,KAAK,GAAG,IAAIJ,IAAJ,EAAZ;QACA,IAAIP,WAAW,GACbW,KAAK,CAACC,QAAN,KAAmB,GAAnB,GAAyBD,KAAK,CAACE,UAAN,EAAzB,GAA8C,GAA9C,GAAoDF,KAAK,CAACG,UAAN,EADtD;QAEA,MAAMC,MAAM,GAAGf,WAAW,GAAG,IAAIO,IAAJ,CAASD,aAAT,CAA7B;QACAU,OAAO,CAACC,GAAR,CAAY,IAAIV,IAAJ,CAASD,aAAT,CAAZ;QACA,MAAMY,QAAQ,GAAGC,IAAI,CAACC,GAAL,CAASC,KAAK,GAAGC,KAAjB,CAAjB;QACA,OAAOJ,QAAQ,IAAI,OAAO,EAAX,CAAf;MACD;;MACD,IAAId,MAAM,CAACC,IAAP,KAAgB,oBAApB,EAA0C;QACxC,OAAO,IAAIE,IAAJ,CAASR,CAAC,CAACS,GAAF,CAAML,QAAN,EAAgBC,MAAM,CAACC,IAAvB,IAA+B,IAAxC,EACJI,WADI,GAEJC,MAFI,CAEG,EAFH,EAEO,CAFP,CAAP;MAGD;;MACD,IAAIN,MAAM,CAACC,IAAP,KAAgB,cAApB,EAAoC;QAClC,OAAON,CAAC,CAACS,GAAF,CAAML,QAAQ,CAACoB,IAAf,EAAqBnB,MAAM,CAACC,IAA5B,CAAP;MACD;;MAED,OAAON,CAAC,CAACS,GAAF,CAAML,QAAN,EAAgBC,MAAM,CAACC,IAAvB,CAAP;IACD,CA1B+B;;IAAA,KA4BhCmB,SA5BgC,GA4BpB,CAACC,KAAD,EAAQrB,MAAR,KAAmB;MAC7B,OAAOqB,KAAK,IAAIrB,MAAM,CAACC,IAAP,IAAeD,MAAM,CAACsB,GAA1B,CAAZ;IACD,CA9B+B;EAAA;;EAgChCC,MAAM,GAAG;IACP,MAAM;MAAEC,IAAF;MAAQC;IAAR,IAAoB,KAAKC,KAA/B;IAEA,oBACE;MAAA;MAAA;QAAA;QAAA;QAAA;MAAA;IAAA,GACGF,IAAI,CAACG,GAAL,CAAS,CAAC5B,QAAD,EAAWsB,KAAX,kBACR;MAAI,GAAG,EAAEA,KAAT;MAAA;MAAA;QAAA;QAAA;QAAA;MAAA;IAAA,GACGI,OAAO,CAACE,GAAR,CAAa3B,MAAD,iBACX;MAAI,GAAG,EAAE,KAAKoB,SAAL,CAAeC,KAAf,EAAsBrB,MAAtB,CAAT;MAAA;MAAA;QAAA;QAAA;QAAA;MAAA;IAAA,GACG,KAAKF,UAAL,CAAgBC,QAAhB,EAA0BC,MAA1B,CADH,CADD,CADH,CADD,CADH,CADF;EAaD;;AAhD+B;;AAmDlC,eAAeH,SAAf"},"metadata":{},"sourceType":"module"}